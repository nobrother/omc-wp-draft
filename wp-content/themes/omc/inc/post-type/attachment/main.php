<?phpnamespace OMC\Post_Type\Attachment;use OMC\Post_Type\Abstract_Main;use \WP_Exception as e;class Main extends Abstract_Main{		protected static $post_type = 'attachment';	protected static $object_class = '\OMC\Post_Type\Attachment\Object';	protected static $allowed_media_query_args = array(		's', 'order', 'orderby', 'posts_per_page', 'paged', 'post_mime_type',		'post_parent', 'post__in', 'post__not_in', 'year', 'monthnum', 		'author', 'tax_query', 	);		// Initialize	static function init(){				add_action( 'generate_rewrite_rules', array( __CLASS__, 'generate_rewrite_rules' ) );		add_action( 'add_attachment', array( __CLASS__, 'add_default_category' ) );		add_filter( 'attachment_link', array( __CLASS__, 'link' ), 10, 2 );		add_filter( 'ajax_query_attachments_args', array( __CLASS__, 'filter_media' ) );		add_filter( 'omc_info_json', array( __CLASS__, 'json_url_id' ) );	}		// Allow custom query args for wp media at backend	static function filter_media( $query ){				$_query = isset( $_REQUEST['query'] ) ? (array) $_REQUEST['query'] : array();		$keys = static::$allowed_media_query_args;		$_query = array_intersect_key( $_query, array_flip( $keys ) );		$query += $_query; // Union with the current query, just fill in the missing, don't overide		//_log( $query );		return $query;	}		// Allow custom query args for wp media at frontend	static function json_url_id( $info ){		if( !isset( $info['wpMedia'] ) )			$info['wpMedia'] = array();				$info['wpMedia']['allowedQueryArgs'] = static::$allowed_media_query_args;				return $info;	}		/*	 * Add terms when an attachment is created	 * Terms info refer $_POST['add_terms']	 * $_POST['add_terms'] = 'Avatar|attachment_category;;background,fun|attachment_tag'	 */	static function add_default_category( $post_id ){				// Target the '/wp-admin/async-upload.php'		if( 			isset( $_REQUEST['action'] ) && 			'upload-attachment' === $_REQUEST['action'] &&			isset( $_SERVER['REQUEST_URI'] ) &&			false !== strpos( $_SERVER['REQUEST_URI'], '/async-upload.php' ) &&						defined( 'DOING_AJAX' ) && true === DOING_AJAX		){			// Add attachment taxonomy			if( !empty( $_POST['add_terms'] ) ){				foreach( explode( ';;', $_POST['add_terms'] ) as $terms ){					list( $terms, $taxonomy ) = explode( '|', $terms );					wp_set_object_terms( $post_id, $terms, $taxonomy );				}			}					}	}		/**	 * Rewrite the permalinks	 */	static function generate_rewrite_rules( $wp_rewrite ) {		$rules = array(			'(image|pdf|media|attachment)/([0-9]{1,})/?$' => 'index.php?attachment_id=$matches[2]'		);				$wp_rewrite->rules = $rules + $wp_rewrite->rules;	}		/**	 * Modify attachment link	 */	static function link( $url, $post_id ) {		if( wp_attachment_is_image( $post_id ) )			return home_url( '/image/'.$post_id.'/' );		else{			switch( get_post_mime_type( $post_id ) ){				case 'application/pdf':					return home_url( '/pdf/'.$post_id.'/' );								default:					return home_url( '/media/'.$post_id.'/' );			}		}	}}// InitializeMain::init();