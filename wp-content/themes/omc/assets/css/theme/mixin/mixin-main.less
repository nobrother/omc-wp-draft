/*====================
 * MISCELLANEOUS
 *====================*/
.avoid-clicks() {
	pointer-events: none;
}
.last-margin-bottom-zero(){
	&:last-child{ margin-bottom: 0; }
}
.last-margin-bottom-zero(@value){
	margin-bottom: @value;
	.last-margin-bottom-zero();
}
.absolute-center(){
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	margin: auto;
}

/*====================
 * FLEXBOX
 *====================*/
.flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// flex-start | flex-end | center | baseline | stretch
.flexbox-align-items(@values: flex-start) {
	-webkit-box-align: @values;
	-ms-flex-align: @values;
  align-items:  @values;
}

// nowrap | wrap | wrap-reverse
.flexbox-wrap(@values: nowrap){
	-ms-flex-wrap: @values;
	flex-wrap: @values;
}

// flex-start | flex-end | center | space-between | space-around
.flexbox-justify-content(@values: flex-start){
	-webkit-box-pack: @values;
	-ms-flex-pack: @values;
	justify-content: @values;
}

.flex(@values: 0 1 auto) {
  -webkit-box-flex: @values;
  -moz-box-flex:  @values;
  -webkit-flex:  @values;
  -ms-flex:  @values;
  flex:  @values;
}

// auto | flex-start | flex-end | center | baseline | stretch;
.flex-align-self(@values: auto) {
	-ms-flex-item-align: @values;
  align-self: @values;
}

/*====================
 * Anchor
 *====================*/
.a-color(@normal, @hover, @focus, @active){
	color: @normal;
	&:hover{ color: @hover; }
	&:focus{ color: @focus; }
	&:active, &:active:focus{ color: @active; }
	&:visited{ color: @normal; }
}
.a-color(@normal, @hover, @focus){
	.a-color(@normal, @hover, @focus, @hover);
}
.a-color(@normal, @hover){
	.a-color(@normal, @hover, @normal, @hover);
}
.a-color(@normal){
	.a-color(@normal, @normal, @normal, @normal);
}

.a-bg-color(@normal, @hover, @focus, @active){
	background-color: @normal;
	&:hover{ background-color: @hover; }
	&:focus{ background-color: @focus; }
	&:active, &:active:focus{ background-color: @active; }
	&:visited{ background-color: @normal; }
}
.a-bg-color(@normal, @hover, @focus){
	.a-bg-color(@normal, @hover, @focus, @hover);
}
.a-bg-color(@normal, @hover){
	.a-bg-color(@normal, @hover, @normal, @hover);
}
.a-bg-color(@normal){
	.a-bg-color(@normal, @normal, @normal, @normal);
}

/*====================
 * BOX SHADOW
 *====================*/
.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1
          box-shadow: @shadow;
}

/*====================
 * BORDER RADIUS
 *====================*/
.border-radius(@value){
	-webkit-border-radius: @value;
	-moz-border-radius: @value;
	border-radius: @value;
}

/*====================
 * ELLIPSIS
 *====================*/
.ellipsis(@no-of-line, @line-height) {
	display: -webkit-box;
	-webkit-box-orient: vertical;
	overflow: hidden;
	position: relative;
	text-overflow: ellipsis;
	white-space: normal;
	word-wrap: break-word;

	-webkit-line-clamp: @no-of-line;
	max-height: @line-height * @no-of-line;
}

/*====================
 * Background Cover
 *====================*/
.background-cover(){
	background-position: center;
	background-repeat: no-repeat;
	background-size: cover;
}

/*====================
 * CONTAINER
 *====================*/
.container(@width, @padding){
	padding: 0 @padding;
	width: 100%;
	max-width: @width + 2*@padding;
}


.container-left(@width, @padding, @indent) when (ispercentage(@indent)){
	margin-left: @indent;
	padding: 0 @padding;
	width: 100% - @indent;
	max-width: @width + 2*@padding;
}

/*====================
 * RESET
 *====================*/
.Reset(){
	*{
		&, &:before, &:after{
			margin: 0;
			padding: 0;
			border: 0;
			color: inherit;
			font: inherit;
			outline: none;
			-webkit-box-sizing: border-box;
			-moz-box-sizing: border-box;
			box-sizing: border-box;
		}
	}
	
	.ul,.ol{
		list-style: none;
	}
	
	html {
		font-family: sans-serif;
		-ms-text-size-adjust: 100%;
		-webkit-text-size-adjust: 100%;
	}
	
	article, aside, details, figcaption, figure, footer, 
	header, hgroup, main, menu, nav, section, summary {
		display: block;
	}
	
	audio, canvas, progress, video {
		display: inline-block;
		vertical-align: baseline;
	}
	audio:not([controls]) {
		display: none;
		height: 0;
	}
	
	.hidden, [hidden], template{
		display: none;
	}
	
	a {
		background-color: transparent;
		cursor: pointer;
		
		&, &:active, &:hover, &:focus, &:visited{
			outline: 0;
		}
	}
	
	b, strong {
		font-weight: @bold;
	}
	
	dfn, em, i{
		font-style: italic;
	}
	
	img, svg{
		border: 0;
		width: auto;
		height: auto;
		max-width: 100%;
		max-height: 100%;
	}	
	svg:not(:root) {
		overflow: hidden;
	}
	
	pre, code, kbd, pre, samp {
		font-family: monospace, monospace;
		font-size: 1em;
		overflow: auto;
	}

	button {
		overflow: visible;
	}
	button, select {
		text-transform: none;
	}
	button, html input[type="button"], input[type="reset"], input[type="submit"] {
		-webkit-appearance: button;
		cursor: pointer;
	}
	button[disabled], html input[disabled] {
		cursor: default;
	}
	button::-moz-focus-inner,
	input::-moz-focus-inner {
		border: 0;
		padding: 0;
	}
	input {
		line-height: normal;
	}
	input[type="checkbox"], input[type="radio"] {
		box-sizing: border-box;
		padding: 0;
	}
	input[type="number"]::-webkit-inner-spin-button,
	input[type="number"]::-webkit-outer-spin-button {
		height: auto;
	}
	input[type="search"] {
		-webkit-appearance: textfield;
		box-sizing: content-box;
	}
	input[type="search"]::-webkit-search-cancel-button,
	input[type="search"]::-webkit-search-decoration {
		-webkit-appearance: none;
	}
	textarea {
		overflow: auto;
	}
	optgroup {
		font-weight: @bold;
	}
	
	table {
		border-collapse: collapse;
		border-spacing: 0;
	}
}


/*====================
 * LIST
 *====================*/
.List(){
	
	.setNumbering(@style: "decimal", @before: "", @after: ""){
		/*-------------------------
		* Posible numbering style
		*-------------------------
		* disc (• • •)
		* circle (○ ○ ○)
		* square
		* decimal (1 2 3)
		* decimal-leading-zero (01, 02, 03)
		* lower-roman (i ii iii)
		* upper-roman (I II III)
		* lower-greek (α β γ)
		* lower-latin (a b c)
		* upper-latin (A B C)
		* armenian (Ա Բ Գ)
		* georgian (ა ბ გ)
		* lower-alpha (a b c)
		* upper-alpha (A B C)
		* cjk-ideographic (Chinese)
		* hebrew
		* hiragana
		* hiragana-iroha
		* katakana
		* katakana-iroha
		* none
		*/
		> li:before {
			content: ~"'@{before}'counter(list-numbering-counter, @style)'@{before}'";
		}
	};
	
	.setFa(@icon){
		> li:before {
			content: "@{icon}";
		}
	}

	.collapse(){
		> li {
			padding-left: 0;
			
			i:first-child, .list-bullet, &:before, figure {
				position: static;	
			}
		}
	}

	.list {
		> li {
			// Set bullet with absolute
			// Indent content with padding
			position: relative;
			.last-margin-bottom-zero();
			padding-left: 2.5em;

			i:first-child, .list-bullet, &:before, figure {
				position: absolute;
				top: 0;
				left: 0;
			}
			
			.last-margin-bottom-zero();
		}
		
		// Fa
		&.list-fa{
			> li:before{
				font-family: FontAwesome;
				line-height: 1em;
				color: @brand-color;
			}
		}

		// Set numbering
		&.list-numbering {

			// Set counter
			counter-reset: list-numbering-counter;

			> li:before {
				content: counter(list-numbering-counter, decimal);
				counter-increment: list-numbering-counter;
			}
		}

		/*
		* Set image
		* Support background image and <img>
		*/
		&.list-image {
			> li {
				> figure {
					.background-cover();
					
					// <img>
					img {
						display: block;
						margin: auto;
						max-height: 100%;
						max-width: 100%;          
					}
				}
			}
		}
	}
}

/*=================
 * GRID SYSTEM
 *=================*/

/*--------------------
 * Float model
 *--------------------*/ 
.Row(){
	// Generate class: .col-md-1, .col-md-2....
	.make-grid-columns(@grid-columns) {
		.col(@index) when (@index =< @grid-columns) {
			@item: ~".col-md-@{index}";
			@{item} {
				width: percentage((@index / @grid-columns));	
			}
			.col((@index + 1));
		}
		.col(1); // kickstart it
	} .make-grid-columns(12);
	
	.setGutter(@selector, @value){
		@item: ~"@{selector}";
		> @{item} {
			margin-right: -@value;

			> div {
				padding-right: @value;
				.last-margin-bottom-zero();
			}
		}	
	}

	.setGutterRule(@selector, @gutter, @rule, @rule-width){
		.Row > .setGutter(@selector, @gutter);

		@item: ~"@{selector}";
		> @{item} > div{
			&:after{
				content: '';
				position: absolute;
				width: 0;
				height: 100%;
				border-right: @rule;
				top: 0;
				right: -(@gutter - @rule-width)/2;
			}
			&:last-child:after{
				display: none;
			}
		}
	}

	.setGap(@selector, @gap){
		@item: ~"@{selector}";
		> @{item} {
			margin-bottom: -@gap;

			> div{
				padding-bottom: @gap;
			}
		}
	}

	/*======================
	* FLEXBOX MODEL
	*======================*/
	.row-flexbox{		
		.flexbox();		
		> div {
			position: relative;
			.flex(1 1 auto);
		}
	}
	.Row-flexbox(){
		.setGutter(@value){
			.Row > .setGutter(".row-flexbox", @value)
		}
		.setGutterRule(@gutter, @rule, @rule-width){
			.Row > .setGutterRule(".row-flexbox", @gutter, @rule, @rule-width);
		}
		.setGap(@gap){
			.Row > .setGap(".row-flexbox", @gap);
		}
	}
	
	/*======================
	* INLINE BLOCK MODEL
	*======================
	* Better then float model but might not work
	* on certain device/pc/browser
	* Assumeing single space with monospace font can 
	* be offset by -0.65em letter spacing
	*/
	.row-inline-block{
		
		// Work arround the fuck up white space problem
		font-family: monospace !important;
		letter-spacing: -0.65em !important;

		text-align: left;
		
		> div {

			/*
			* Recover back the fuck up work arround
			* You need to put back the font family
			* Assume is @fn-body
			*/
			font-family: @fn-body;
			letter-spacing: normal;

			display: inline-block !important;
			float: none !important;
			vertical-align: top;

		}
		
		&.no-wrap{
			white-space: nowrap;

			> div{
				white-space: normal;
			}
		}

		// Make justify
		&.justify{
			text-align: justify;
			line-height: 0;
			font-size: 0;
			
			&:after{
				content: '';
				display: inline-block;
				width: 100%;
				height: 0;
			}
			
			> div {
				text-align: left;
				line-height: @line-height-body;
				font-size: @fn-size-body;
			}
		}
	}

	.Row-inline-block(){		
		.setGutter(@value){
			.Row > .setGutter(".row-inline-block", @value)
		}
		.setGutterRule(@gutter, @rule, @rule-width){
			.Row > .setGutterRule(".row-inline-block", @gutter, @rule, @rule-width);
		}
		.setGap(@gap){
			.Row > .setGap(".row-inline-block", @gap);
		}
	}
}

/*=================
 * RATIO WRAP
 *=================*/
.RatioWrap(){
	.ratio-wrap{
		position: relative;

		> .wrap-content{
			position: absolute;
			width: 100%;
			height: 100%;
			top: 0;
			left: 0;
		}
	}
	
	.setRatio(@width, @height){
		padding-top: percentage(@height/@width);
	}
}

/*=================
 * CARDS
 *=================*/
.Cards() {
	.card-container{
		margin: auto;
	}
	
	.card-image {
		.background-cover();
	}
}

/*=======================================
 * FEATURES
 * ======================================
 * A list of "Feature" items
 * "Feature" item is a two-columned item
 * generally with image and text
 * Both column is push to each end.
 * ---------------------------------------*/
.Features(){
	.features{
		> .feature{
			
			> .row-flexbox{
				.flexbox-justify-content(space-between);
			}
			
			.feature-image{
				.flex(0 0 auto);
				.background-cover();
			}
		}
	}
	
	.setMinGutter(@value){
		> .feature{
			.feature-image + .feature-content,
			.feature-content + .feature-image{
				margin-left: @value;
			}	
		}
	}
}